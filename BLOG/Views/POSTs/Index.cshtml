@*@model IEnumerable<BLOG.Models.POST>*@
@model PagedList.PagedList<BLOG.Models.POST>


@{
    ViewBag.Title = "Blog Posts!";
}

@*.IsAuthenticated allows user to use if registered & logged in, preferably for commenting
    .IsInRole allows the use if "Admin"
       types of secure: by role or by back-end
*@
<style>
    body {
        background-color: transparent;
    }
</style>
<div class="row row-black">
    <div class="intro-text">
        <div class="intro-heading">
            <i class="fa fa-comments"></i> @ViewBag.Title
        </div>
    </div>
</div>
<div class="row row-white">
    <div class="col-sm-12">
        @if (User.IsInRole("Admin"))
        {
            <b>@Html.ActionLink("Create New", "Create")</b>
        }
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page }))
    </div>
    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
        @using (Html.BeginForm("Index", "POSTs", FormMethod.Post, htmlAttributes: new { @class = "form-inline topbar__search", role = "form" }))
        {
            <div class="row pull-right">
                <div class="col-xs-12 ">
                    <label class="sr-only " for="nav-search">Search</label>
                    <input type="search" name="searchStr" class="form-control" id="nav-search" placeholder="Search Blog" />
                    <button type="submit"><i class="fa fa-search" aria-hidden="true"></i></button>
                </div>
            </div>
        }
    </div>
    @*@foreach (var item in Model)
        {
            <div class="row">
                <div id=@("Blogtitle"+item.ID) class="col-sm-12">
                    @item.TITLE
                </div>
            </div>
            <div class="row">
                <div id=@("Blogtitle"+item.ID) class="col-sm-12">
                    @Html.Raw(item.BODY)
                </div>
            </div>
        }*@
</div>

@*@for (int i = 0; i < 8; i++)
    {

        <div class="col-sm-6" style="border: 2px solid green">
            @i
        </div>

    }*@

@foreach (var item in Model)
{

    <div class="row row-white">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <div class="row" style="padding: 10px;">
                @************* PHOTO SECTION *************@
                <div class="col-md-6">
                    <a href="@Url.Action("Details", new { id = item.ID })" class="hvr-curl-top-right center-block" id="blog-border">
                        @if (item.MEDIA != null)
                        {
                            <img type="image" src="@Html.Raw("data:image/png;base64," + Convert.ToBase64String(item.MEDIA))" style="width: 100%" />

                            @*<img id="pic" src="@Url.Content(item.MEDIA)" alt="Image" />*@
                        }
                        else
                        {
                            <div class="center-block">
                                <img id="pic" src="https://media.giphy.com/media/10QeIV66dUxAgU/giphy.gif" alt="Image" />
                                <span style="background: white;">Sorry, there are no pictures attached to this post, but please enjoy this gif.</span>
                            </div>
                        }
                    </a>
                </div>

                @************* INFO SECTION *************@
                <div class="col-md-6" id="blog-border">
                    <a id=@("blogtitle"+item.ID) href="@Url.Action("Details", new { id = item.ID, })">
                        <div class="row row-white" id="blog-title">
                            <h4>@item.TITLE</h4>
                        </div>
                    </a>
                    <div class="row row-white">
                        <div class="col-md-12">
                            <div id=@("blogtext"+item.ID) class="col-sm-12">
                                <div id="wrapper + @item.ID">
                                    @Html.Raw(item.BODY)
                                </div>
                            </div>
                            <a href=@("/Posts/Details/" + item.ID)><span class="hvr-icon-wobble-horizontal pull-right">Read more</span> </a>
                        </div>
                    </div>
                    <div class="row row-white">
                        <div class="col-md-9">
                            <div>
                                <i class="fa fa-calendar"></i> CREATED: @item.CREATED.ToString("MMMM dd, yyyy hh:mm tt")
                            </div>
                            <div>
                                <i class="fa fa-calendar-o"></i> UPDATED: @item.UPDATED.Value.ToString("MMMM dd, yyyy hh:mm tt")
                            </div>
                        </div>
                        <div class="col-md-3">
                            @if (User.IsInRole("Admin"))
                            {
                                using (Html.BeginForm("Delete", "POSTs", FormMethod.Post))
                                {
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.ID" />
                                    <button type="submit" class="btn btn-danger btn-sm pull-right">
                                        <i class="fa fa-close"></i>
                                    </button>
                                }
                                <a href="@Url.Action("Edit", "POSTs", new { id = item.ID })" class="btn btn-warning btn-sm pull-right"><i class="fa fa-edit"></i></a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="row row-white">
    <div class="col-sm-12">
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page }))
    </div>
</div>

@*@Html.PagedListPager(Model, page => Url.Action("Index", new {  } ))*@

@*pagelist.css line 53 & 54, to change page button color*@

@section scripts{
    <script>
		var word = '@ViewBag.searchStr';
		if (word !== '') {
			var title = $("[id^=blogtitle]").html();
			$("[id^=blogtitle]").html(strReplaceAll(title, word, "<span class='highlight'>" + word + "</span>"));

			var text = $("[id^=blogtext]").html();
			$("[id^=blogtext]").html(strReplaceAll(text, word, "<span class='highlight'>" + word + "</span>"));
		}

		function strReplaceAll(string, Find, Replace) {
			try {
				return string.replace(new RegExp(Find, "gi"), Replace);
			}
			catch (ex) {
				return string;
			}
		}
    </script>
    <script>
        $(document).ready(function () {
            $("[id^=wrapper]").dotdotdot({
                /*	The text to add as ellipsis. */
                ellipsis: '... ',

                /*	How to cut off the text/html: 'word'/'letter'/'children' */
                wrap: 'word',

                /*	Wrap-option fallback to 'letter' for long words */
                fallbackToLetter: true,

                /*	jQuery-selector for the element to keep and put after the ellipsis. */
                after: "a.readmore",

                /*	Whether to update the ellipsis: true/'window' */
                watch: false,

                /*	Optionally set a max-height, can be a number or function.
                    If null, the height will be measured. */
                height: 100,

                /*	Deviation for the height-option. */
                tolerance: 0,

                /*	Callback function that is fired after the ellipsis is added,
                    receives two parameters: isTruncated(boolean), orgContent(string). */
                callback: function (isTruncated, orgContent) { },

                lastCharacter: {

                    /*	Remove these characters from the end of the truncated text. */
                    remove: [' ', ',', ';', '.', '!', '?'],

                    /*	Don't add an ellipsis if this array contains
                        the last character of the truncated text. */
                    noEllipsis: []
                }
            });
        });

    </script>
}