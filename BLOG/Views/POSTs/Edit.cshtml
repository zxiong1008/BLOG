@model BLOG.Models.POST

@{
    ViewBag.Title = "Edit";
}
<style>
    body {
        background-color: transparent;
    }
</style>
<div class="row row-white">@Html.Raw(ViewBag.Image ?? "No Bytes[]")</div>

@using (Html.BeginForm("Edit", "POSTs", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="row row-black">
            <div class="intro-text">
                <div class="intro-heading">Edit Blog</div>
            </div>
        </div>
        <div class="row row-white">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.ID)
            @Html.HiddenFor(model => model.CREATED)
            @Html.HiddenFor(model => model.MEDIA)

            @*<div class="form-group">
                    @Html.LabelFor(model => model.CREATED, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.CREATED, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CREATED, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.UPDATED, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UPDATED, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UPDATED, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group">
                @Html.LabelFor(model => model.TITLE, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TITLE, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TITLE, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BODY, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.BODY, 10, 0, htmlAttributes: new { @class = "form-control", id = "textarea" })
                    @Html.ValidationMessageFor(model => model.BODY, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                    @Html.LabelFor(model => model.MEDIA, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.MEDIA, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MEDIA, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            <div class="form-group">
                @Html.LabelFor(model => model.MEDIA, new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @{
                        if (Model.MEDIA != null)
                        {
                            <img type="image" src="@Html.Raw("data:image/png;base64," + Convert.ToBase64String(Model.MEDIA))" style="width: 100%" />
                        }
                        else
                        {
                            <img alt="No Image" />
                        }
                    }
                    @*<img src="@Url.Content(Model.MEDIA)" class="img-thumbnail" />*@
                </div>
                <div class="col-md-7">
                    <input type="file" id="fileUpload" name="image" />
                    @*@Html.EditorFor(model => model.MEDIA, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.ValidationMessageFor(model => model.MEDIA, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PUBLISH, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.PUBLISH)
                        @Html.ValidationMessageFor(model => model.PUBLISH, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-6">
                    <div class="btn btn-default pull-left">
                        @Html.ActionLink("Back to List", "Index")
                    </div>
                </div>
                <div class="col-md-6">
                    <input type="submit" value="Save" class="btn btn-primary pull-right" />
                </div>
            </div>
        </div>
    </div>
}


@section scripts{
    <script type="text/javascript">
        tinymce.init({
            selector: 'textarea',
            height: 300,
            theme: 'modern',
            plugins: [
                'advlist autolink lists link image charmap print preview hr anchor pagebreak',
                'searchreplace wordcount visualblocks visualchars code fullscreen',
                'insertdatetime media nonbreaking save table contextmenu directionality',
                'emoticons template paste textcolor colorpicker textpattern imagetools'
            ],
            toolbar1: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent',
            toolbar2: 'print preview media | link image | forecolor backcolor emoticons',
            image_advtab: true,
            templates: [
                { title: 'Test template 1', content: 'Test 1' },
                { title: 'Test template 2', content: 'Test 2' }
            ],
            content_css: [
                '//fast.fonts.net/cssapi/e6dc9b99-64fe-4292-ad98-6974f93cd2a2.css',
                '//www.tinymce.com/css/codepen.min.css'
            ]
        });
    </script>
}